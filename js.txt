// Supabase配置
const SUPABASE_URL = 'https://fyuqdxccxzqgfokueafd.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ5dXFkeGNjeHpxZ2Zva3VlYWZkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MTQyODYsImV4cCI6MjA3NDk5MDI4Nn0.9cJbbV0kxS9izE8rn95VWUuibOQ6NtN3uyKrGFKpX2U';

// 全局状态
let supabase = null;
let currentUser = null;
let isEditingMode = false;

// 初始化Supabase客户端
function initializeSupabase() {
    if (window.supabase) {
        supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        console.log('Supabase客户端初始化成功');
        return true;
    }
    return false;
}

// 检查并等待Supabase库加载
function waitForSupabase(callback, maxAttempts = 20, interval = 200) {
    let attempts = 0;
    
    function check() {
        attempts++;
        console.log(`检查Supabase库加载状态，尝试次数: ${attempts}`);
        
        if (window.supabase) {
            console.log('Supabase库已加载');
            if (initializeSupabase()) {
                console.log('Supabase客户端初始化成功');
                callback();
                return;
            }
        }
        
        if (attempts < maxAttempts) {
            console.log(`等待${interval}ms后重试...`);
            setTimeout(check, interval);
        } else {
            console.error('Supabase库加载超时');
            alert('系统初始化失败，请刷新页面重试');
        }
    }
    
    check();
}

// 模态框控制函数
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) modal.style.display = 'none';
}

// 认证相关函数
async function signUp(email, password) {
    if (!supabase) {
        alert('系统未初始化完成，请稍后重试');
        return { success: false, error: 'Supabase未初始化' };
    }
    
    try {
        console.log('开始注册用户:', email);
        const { data, error } = await supabase.auth.signUp({
            email: email,
            password: password,
        });
        
        if (error) {
            console.error('注册错误:', error);
            throw error;
        }
        
        console.log('注册成功:', data);
        return { success: true, data };
    } catch (error) {
        console.error('注册异常:', error);
        return { success: false, error: error.message };
    }
}

async function signIn(email, password) {
    if (!supabase) {
        alert('系统未初始化完成，请稍后重试');
        return { success: false, error: 'Supabase未初始化' };
    }
    
    try {
        const { data, error } = await supabase.auth.signInWithPassword({
            email: email,
            password: password,
        });
        
        if (error) throw error;
        
        currentUser = data.user;
        updateUIAfterLogin();
        return { success: true, data };
    } catch (error) {
        return { success: false, error: error.message };
    }
}

async function signOut() {
    if (!supabase) {
        alert('系统未初始化完成，请稍后重试');
        return { success: false, error: 'Supabase未初始化' };
    }
    
    try {
        const { error } = await supabase.auth.signOut();
        if (error) throw error;
        
        currentUser = null;
        isEditingMode = false;
        updateUIAfterLogout();
        return { success: true };
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// 检查登录状态
async function checkAuthStatus() {
    if (!supabase) return;
    
    const { data: { session } } = await supabase.auth.getSession();
    if (session) {
        currentUser = session.user;
        updateUIAfterLogin();
    }
}

// UI更新函数
function updateUIAfterLogin() {
    const loginBtn = document.querySelector('.login-btn');
    if (loginBtn) {
        loginBtn.textContent = '管理员';
        loginBtn.onclick = showAdminPanel;
    }
    
    // 显示编辑按钮
    document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.style.display = 'inline-block';
    });
}

function updateUIAfterLogout() {
    const loginBtn = document.querySelector('.login-btn');
    if (loginBtn) {
        loginBtn.textContent = '登录';
        loginBtn.onclick = showLoginModal;
    }
    
    // 隐藏编辑按钮
    document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.style.display = 'none';
    });
    
    // 退出编辑模式
    exitEditMode();
}

// 模态框控制
function showLoginModal() {
    const modal = document.getElementById('loginModal');
    if (modal) modal.style.display = 'block';
}

function hideLoginModal() {
    const loginModal = document.getElementById('loginModal');
    const registerModal = document.getElementById('registerModal');
    
    if (loginModal) loginModal.style.display = 'none';
    if (registerModal) registerModal.style.display = 'none';
}

function showRegisterModal() {
    const loginModal = document.getElementById('loginModal');
    const registerModal = document.getElementById('registerModal');
    
    if (loginModal) loginModal.style.display = 'none';
    if (registerModal) registerModal.style.display = 'block';
}

function showAdminPanel() {
    const panel = document.getElementById('adminPanel');
    if (panel) panel.style.display = 'block';
}

function hideAdminPanel() {
    const panel = document.getElementById('adminPanel');
    if (panel) panel.style.display = 'none';
}

// 登录注册处理
async function handleLogin(event) {
    event.preventDefault(); // 阻止表单默认提交行为
    
    const email = document.getElementById('loginEmail')?.value;
    const password = document.getElementById('loginPassword')?.value;
    
    if (!email || !password) {
        alert('请输入邮箱和密码');
        return;
    }
    
    const result = await signIn(email, password);
    
    if (result.success) {
        hideLoginModal();
        alert('登录成功！');
    } else {
        alert('登录失败：' + result.error);
    }
}

// 绑定表单提交事件
function bindFormEvents() {
    console.log('开始绑定表单事件...');
    
    // 绑定登录表单
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', handleLogin);
        console.log('登录表单绑定成功');
    } else {
        console.error('登录表单未找到');
    }
    
    // 绑定注册表单
    const registerForm = document.getElementById('registerForm');
    if (registerForm) {
        registerForm.addEventListener('submit', handleRegister);
        console.log('注册表单绑定成功');
    } else {
        console.error('注册表单未找到');
    }
}

// 修复注册处理函数
async function handleRegister(event) {
    console.log('注册表单提交事件触发');
    event.preventDefault(); // 阻止表单默认提交行为
    
    const email = document.getElementById('registerEmail')?.value;
    const password = document.getElementById('registerPassword')?.value;
    const confirmPassword = document.getElementById('confirmPassword')?.value;
    
    console.log('表单数据:', { email, password, confirmPassword });
    
    if (!email || !password || !confirmPassword) {
        alert('请填写所有字段');
        return;
    }
    
    if (password !== confirmPassword) {
        alert('密码不一致');
        return;
    }
    
    if (password.length < 6) {
        alert('密码至少6位');
        return;
    }
    
    console.log('开始调用Supabase注册...');
    const result = await signUp(email, password);
    
    if (result.success) {
        alert('注册成功！请检查邮箱验证');
        hideLoginModal();
    } else {
        alert('注册失败：' + result.error);
    }
}

// 确保hideLoginModal函数存在
function hideLoginModal() {
    const loginModal = document.getElementById('loginModal');
    const registerModal = document.getElementById('registerModal');
    
    if (loginModal) loginModal.style.display = 'none';
    if (registerModal) registerModal.style.display = 'none';
}

// 内容编辑功能
function enterEditMode() {
    isEditingMode = true;
    
    // 为所有可编辑内容添加编辑功能
    document.querySelectorAll('[data-editable]').forEach(element => {
        element.contentEditable = true;
        element.style.border = '1px dashed #4CAF50';
        element.style.padding = '5px';
        element.style.borderRadius = '3px';
    });
    
    // 显示保存按钮
    const saveBtn = document.getElementById('saveChangesBtn');
    const exitBtn = document.getElementById('exitEditBtn');
    const enterBtn = document.getElementById('enterEditBtn');
    
    if (saveBtn) saveBtn.style.display = 'block';
    if (exitBtn) exitBtn.style.display = 'block';
    if (enterBtn) enterBtn.style.display = 'none';
}

function exitEditMode() {
    isEditingMode = false;
    
    // 移除编辑功能
    document.querySelectorAll('[data-editable]').forEach(element => {
        element.contentEditable = false;
        element.style.border = 'none';
        element.style.padding = '0';
    });
    
    // 隐藏保存按钮
    const saveBtn = document.getElementById('saveChangesBtn');
    const exitBtn = document.getElementById('exitEditBtn');
    const enterBtn = document.getElementById('enterEditBtn');
    
    if (saveBtn) saveBtn.style.display = 'none';
    if (exitBtn) exitBtn.style.display = 'none';
    if (enterBtn) enterBtn.style.display = 'block';
}

async function saveChanges() {
    if (!isEditingMode || !supabase) return;
    
    const changes = {};
    
    // 收集所有修改的内容
    document.querySelectorAll('[data-editable]').forEach(element => {
        const key = element.getAttribute('data-editable');
        changes[key] = element.textContent;
    });
    
    try {
        // 保存到Supabase
        const { error } = await supabase
            .from('page_content')
            .upsert(changes, { onConflict: 'key' });
            
        if (error) throw error;
        
        alert('保存成功！');
        exitEditMode();
        
    } catch (error) {
        alert('保存失败：' + error.message);
    }
}

// 图片上传功能
async function uploadImage(file, section) {
    if (!supabase) {
        alert('系统未初始化完成，请稍后重试');
        return { success: false, error: 'Supabase未初始化' };
    }
    
    try {
        const fileName = `${section}/${Date.now()}_${file.name}`;
        
        const { data, error } = await supabase.storage
            .from('images')
            .upload(fileName, file);
            
        if (error) throw error;
        
        // 获取公开URL
        const { data: { publicUrl } } = supabase.storage
            .from('images')
            .getPublicUrl(fileName);
            
        return { success: true, url: publicUrl };
    } catch (error) {
        return { success: false, error: error.message };
    }
}

function handleImageUpload(event, section) {
    const file = event.target.files[0];
    if (!file) return;
    
    if (!file.type.startsWith('image/')) {
        alert('请选择图片文件');
        return;
    }
    
    uploadImage(file, section).then(result => {
        if (result.success) {
            // 更新页面图片
            const imgElement = document.querySelector(`[data-image="${section}"]`);
            if (imgElement) {
                imgElement.src = result.url;
            }
            alert('图片上传成功！');
        } else {
            alert('图片上传失败：' + result.error);
        }
    });
}

// 页面功能函数
function scrollToSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.scrollIntoView({ behavior: 'smooth' });
    }
}

// 果农寄语音频播放
function playFarmerMessage() {
    // 这里可以添加真实的音频文件
    alert('果农寄语音频播放功能（需要真实音频文件）');
}

// 从Supabase获取数据
async function loadTraceabilityData() {
    if (!supabase) return;
    
    try {
        // 获取产品信息
        const { data: products, error } = await supabase
            .from('pineapple_products')
            .select('*');
            
        if (error) {
            console.error('获取产品数据错误:', error);
            return;
        }
        
        // 更新页面数据
        if (products && products.length > 0) {
            updateProductInfo(products[0]);
        }
        
    } catch (error) {
        console.error('数据加载错误:', error);
    }
}

// 更新产品信息
function updateProductInfo(product) {
    // 这里可以根据实际数据结构更新页面内容
    console.log('产品信息:', product);
}

// 页面加载完成后执行
document.addEventListener('DOMContentLoaded', function() {
    console.log('页面加载完成，开始初始化...');
    
    // 绑定表单事件
    bindFormEvents();
    
    // 等待Supabase库加载完成后初始化
    waitForSupabase(function() {
        console.log('Supabase初始化完成');
        // 检查登录状态
        checkAuthStatus();
        // 加载溯源数据
        loadTraceabilityData();
    });
    
    // 其他事件绑定...
});

// 添加一些交互效果
function addInteractiveEffects() {
    // 产品卡片悬停效果
    const productCards = document.querySelectorAll('.product-card');
    productCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.boxShadow = '0 10px 25px rgba(0,0,0,0.15)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.boxShadow = '0 5px 15px rgba(0,0,0,0.1)';
        });
    });
}

// 初始化交互效果
addInteractiveEffects();